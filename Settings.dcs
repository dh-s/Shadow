MODULE Settings;

PROCEDURE writeIniStr (IniFile, Section, Ident, Value : str255); BUILTIN 624;
PROCEDURE readIniStr (IniFile, Section, Ident, Default : str255; ReturnStr : OUT str255); BUILTIN 625;
PROCEDURE writeIniInt (IniFile, Section, Ident : str255; Value : integer); BUILTIN 628;
PROCEDURE readIniInt ( IniFile, Section, Ident: str255; Default : integer; ReturnInt : OUT integer); BUILTIN 629;
PROCEDURE writeIniReal (IniFile, Section, Ident : str255; Value : real); BUILTIN 630;
PROCEDURE readIniReal (IniFile, Section, Ident: str255; Default : real; ReturnReal : OUT real); BUILTIN 631;
PROCEDURE msg_OK (msg : str255); BUILTIN 245;

VAR
	iniFileName	: str255;
	ident				: str255;
	section			: str255;
	atr					: attrib;
	initialised	: boolean;

PROCEDURE InitSettings (iniName : string);		PUBLIC;
BEGIN
		getpath (iniFileName, pathsup);
		strcat (iniFileName, 'dhsoftware\\');
		strcat (iniFileName, iniName);
		strcat (iniFileName, '.ini');
		section := 'General';
		initialised := true;
END InitSettings;

PROCEDURE SaveIniInt (name : string;  value : integer);  PUBLIC;
BEGIN
		strassign (ident, name);
		writeIniInt (iniFileName, section, ident, value);
END SaveIniInt;

PROCEDURE SaveInt (name : string;  value : integer; toini : boolean);		PUBLIC;
BEGIN
	if atr_sysfind (name, atr) then
		atr.int := value;
		atr_update (atr);
	else
		atr_init (atr, atr_int);
		strassign (atr.name, name);
		atr.int := value;
		atr_add2sys (atr);
	end;
	if toini then
		SaveIniInt(name, value);
	end;
END SaveInt;

FUNCTION GetIniInt (name : string; default : integer) : integer;		PUBLIC;
VAR
	i : integer;
BEGIN
		strassign (ident, name);
		readIniInt (iniFileName, section, ident, default, i);
		return i;
END GetIniInt;

FUNCTION GetSvdInt (name : string; default : integer) : integer;		PUBLIC;
BEGIN
	if atr_sysfind (name, atr) then
		return atr.int;
	else
		return GetIniInt (name, default);
	end;
END GetSvdInt;

PROCEDURE SaveAng (name : string;  value : real; toini : boolean);		PUBLIC;
BEGIN
	if atr_sysfind (name, atr) then
		atr.ang := value;
		atr_update (atr);
	else
		atr_init (atr, atr_ang);
		strassign (atr.name, name);
		atr.ang := value;
		atr_add2sys (atr);
	end;
	if toini then
		strassign (ident, name);
		writeIniReal (iniFileName, section, ident, value);
	end;
END SaveAng;

FUNCTION GetIniRl (name : string; default : real) : real;		PUBLIC;
VAR
	r : real;
BEGIN
	strassign (ident, name);
	readIniReal (iniFileName, section, ident, default, r);
	return r;
END GetIniRl;


FUNCTION GetSvdAng (name : string; default : real) : real;		PUBLIC;
VAR
	r : real;
BEGIN
	if atr_sysfind (name, atr) then
		return atr.ang;
	else
		return GetIniRl (name, default);
	end;
END GetSvdAng;

PROCEDURE SaveIniRl (name : string; value : real);	PUBLIC;
BEGIN
		strassign (ident, name);
		writeIniReal (iniFileName, section, ident, value);
END SaveIniRl;


PROCEDURE SaveRl (name : string;  value : real; toini : boolean);		PUBLIC;
BEGIN
	if atr_sysfind (name, atr) then
		atr.rl := value;
		atr_update (atr);
	else
		atr_init (atr, atr_rl);
		strassign (atr.name, name);
		atr.rl := value;
		atr_add2sys (atr);
	end;
	if toini then
		SaveIniRl (name, value);
	end;
END SaveRl;

FUNCTION GetSvdRl (name : string; default : real) : real;		PUBLIC;
VAR
	r : real;
BEGIN
	if atr_sysfind (name, atr) then
		return atr.rl;
	else
		return GetIniRl (name, default);
	end;
End GetSvdRl;



PROCEDURE SaveBln (name : string;  value : boolean; toini : boolean);		PUBLIC;
VAr
	ival : integer;
	sval : str255;
BEGIN
	if value then
		ival := 1;
		sval := 'true';
	else
		sval := 'false';
		ival := 0;
	end;
	if atr_sysfind (name, atr) then
		atr.int := ival;
		atr_update (atr);
	else
		atr_init (atr, atr_int);
		strassign (atr.name, name);
		atr.int := ival;
		atr_add2sys (atr);
	end;
	if toini then
		strassign (ident, name);
		writeIniStr (iniFileName, section, ident, sval);
	end;
END SaveBln;

FUNCTION GetSvdBln (name : string; default : boolean) : boolean;		PUBLIC;
VAR
	b : boolean;
	s : str255;
	d	: str255;
BEGIN
	if atr_sysfind (name, atr) then
		if atr.int = 0 then
			return false;
		else
			return true;
		end;
	else
		strassign (ident, name);
		if default then
			d := 'true';
		else
			d := 'false';
		end;
		readIniStr (iniFileName, section, ident, d, s);
		if strpos ('t', s, 1) = 1 or strpos ('T', s, 1) = 1 then
			return true;
		else
			return false;
		end;
	end;
END GetSvdBln;

PROCEDURE SaveIniStr (name : string;  value : string);		PUBLIC;
VAR
	s : str255;
BEGIN
	strassign (s, value);
	strassign (ident, name);
	writeIniStr (iniFileName, section, ident, s);
END SaveIniStr;


PROCEDURE SaveStr (name : string;  value : string; toini : boolean);		PUBLIC;
BEGIN
	if atr_sysfind (name, atr) then
		if atr.atrtype = atr_str then
			strassign (atr.str, value);
			atr_update (atr);
		else
			atr_delsys (atr);
		end;
	else
		atr_init (atr, atr_str);
		strassign (atr.name, name);
		strassign (atr.str, value);
		atr_add2sys (atr);
	end;
	if toini then
		SaveIniStr (name, value);
	end;
END SaveStr;

PROCEDURE GetIniStr (name : string; default : string; result : OUT str80);		PUBLIC;
VAR
	res : str255;
	def	: str255;
	res80 : str80;
BEGIN
	strassign (ident, name);
	strassign (def, default);
	readIniStr (iniFileName, section, ident, def, res);
	strassign (res80, res);
	result := res80;
END GetIniStr;

PROCEDURE GetSvdStr (name : string; default : string; result : OUT str80 );		PUBLIC;
VAR
	res : str255;
	def	: str255;
	res80 : str80;
BEGIN
	if atr_sysfind (name, atr) then
		result := atr.str;
	else
		GetIniStr (name, default, res80);
		result := res80;
	end;
END GetSvdStr;

PROCEDURE SaveLayer (name : string; lyr : IN OUT layer); PUBLIC;
BEGIN
	if atr_sysfind (name, atr) then
		if atr.atrtype = atr_addr then
			atr.lgladdr := lgl_addr(lyr);
			atr_update (atr);
			return;
		else
			atr_delsys (atr);
		end;
	end;
	atr_init (atr, atr_addr);
	atr.name := name;
	atr.lgladdr := lgl_addr(lyr);
	atr_add2sys (atr);
END SaveLayer;

FUNCTION GetSvdLyr (name : string; lyr : OUT layer) : boolean; 	PUBLIC;
BEGIN
	if atr_sysfind (name, atr) then
		if atr.atrtype = atr_addr then
			lyr := layer(atr.lgladdr);
			return true;
		end;
	end;
	return false;
END GetSvdLyr;

END Settings.
